function jasna_all_experiments ()
    % JASNA_ALL_EXPERIMENTS
    %
    % All experiments for the PAMI paper.

    %% Settings
    %results_prefix = 'results-final';
    %num_points = 1000;
    %num_repetitions = 5;

    results_prefix = 'results-final-inf';
    num_points = inf;
    num_repetitions = 1;
    
    %% Common descriptor definitions
    def_o_brief64 = { 'Bytes', 64, 'UseOrientation', true };
    def_u_brief64 = { 'Bytes', 64, 'UseOrientation', false };

    def_o_latch64 = { 'Bytes', 64, 'RotationInvariance', true };
    def_u_latch64 = { 'Bytes', 64, 'RotationInvariance', false };

    def_u_ag_basic = { 'orientation', false, 'compute_extended', false, 'sampling', 'simple', 'use_scale', false, 'base_sigma', sqrt(2) };
    def_o_ag_basic = { 'orientation', true, 'compute_extended', false, 'sampling', 'simple', 'use_scale', false, 'base_sigma', sqrt(2) };
    
    def_u_ag_23x2_10 = { 'orientation', false, 'num_rays', 23, 'num_circles', 10, 'circle_step', 1.042*sqrt(2) };
    def_o_ag_23x2_10 = { 'orientation', true,  'num_rays', 23, 'num_circles', 10, 'circle_step', 1.042*sqrt(2) };

    def_su_ag_23x2_10 = { 'orientation', false, 'num_rays', 23, 'num_circles', 10, 'circle_step', 1.042*sqrt(2), 'use_scale', true };
    def_so_ag_23x2_10 = { 'orientation', true,  'num_rays', 23, 'num_circles', 10, 'circle_step', 1.042*sqrt(2), 'use_scale', true };

    def_u_ag_13x2_9 = { 'orientation', false, 'num_rays', 13, 'num_circles', 9, 'circle_step', 1.104*sqrt(2) };
    def_o_ag_13x2_9 = { 'orientation', true,  'num_rays', 13, 'num_circles', 9, 'circle_step', 1.104*sqrt(2) };

    def_su_ag_13x2_9 = { 'orientation', false, 'num_rays', 13, 'num_circles', 9, 'circle_step', 1.104*sqrt(2), 'use_scale', true };
    def_so_ag_13x2_9 = { 'orientation', true,  'num_rays', 13, 'num_circles', 9, 'circle_step', 1.104*sqrt(2), 'use_scale', true };
    
    %% Unoriented descriptors test
    sequences = { 'graffiti', 'wall' };
    results_dir = fullfile(results_prefix, 'pairs-unoriented');

    % Define experiments
    experiments = define_experiment();
    
    experiments(end+1) = define_experiment(...
        'u-surf', ...
        'SURF keypoints (unoriented)', ...
        @() vicos.keypoint_detector.SURF('HessianThreshold', 400, 'NOctaves', 3, 'NOctaveLayers', 4, 'UpRight', true), ...
        'U-SURF', @() vicos.descriptor.SURF('UpRight', true), ...
        'U-BRIEF64', @() vicos.descriptor.BRIEF(def_u_brief64{:}), ...
        'U-LATCH64', @() vicos.descriptor.LATCH(def_u_latch64{:}), ...
        'U-\alpha\gamma basic', @() vicos.descriptor.AlphaGamma(def_u_ag_basic{:}), ...
        'U-\alpha\gamma32', @() vicos.descriptor.AlphaGamma(def_u_ag_13x2_9{:}), ...
        'U-\alpha\gamma60', @() vicos.descriptor.AlphaGamma(def_u_ag_23x2_10{:}), ...
        'SU-\alpha\gamma32', @() vicos.descriptor.AlphaGamma(def_su_ag_13x2_9{:}, 'base_keypoint_size', 18.5), ...
        'SU-\alpha\gamma60', @() vicos.descriptor.AlphaGamma(def_su_ag_23x2_10{:}, 'base_keypoint_size', 18.5) ...
    );

    experiments(end+1) = define_experiment(...
        'u-sift', ...
        'SIFT keypoints (unoriented)', ...
        @() vicos.keypoint_detector.SIFT('UpRight', true), ...
        'U-SIFT', @() vicos.descriptor.SIFT('UpRight', true), ...
        'U-BRIEF64', @() vicos.descriptor.BRIEF(def_u_brief64{:}), ...
        'U-LATCH64', @() vicos.descriptor.LATCH(def_u_latch64{:}), ...
        'U-\alpha\gamma basic', @() vicos.descriptor.AlphaGamma(def_u_ag_basic{:}), ...
        'U-\alpha\gamma32', @() vicos.descriptor.AlphaGamma(def_u_ag_13x2_9{:}), ...
        'U-\alpha\gamma60', @() vicos.descriptor.AlphaGamma(def_u_ag_23x2_10{:}), ...
        'SU-\alpha\gamma32', @() vicos.descriptor.AlphaGamma(def_su_ag_13x2_9{:}, 'base_keypoint_size', 3.25), ...
        'SU-\alpha\gamma60', @() vicos.descriptor.AlphaGamma(def_su_ag_23x2_10{:}, 'base_keypoint_size', 3.25) ...
    );

    experiments(end+1) = define_experiment(...
        'r7bw', ...
        'R7BW keypoints', ...
        @() vicos.keypoint_detector.FeatureR7BW(), ...
        'U-BRIEF64', @() vicos.descriptor.BRIEF(def_u_brief64{:}), ...
        'U-LATCH64', @() vicos.descriptor.LATCH(def_u_latch64{:}), ...
        'U-\alpha\gamma basic', @() vicos.descriptor.AlphaGamma(def_u_ag_basic{:}), ...
        'U-\alpha\gamma32', @() vicos.descriptor.AlphaGamma(def_u_ag_13x2_9{:}), ...
        'U-\alpha\gamma60', @() vicos.descriptor.AlphaGamma(def_u_ag_23x2_10{:}), ...
        'SU-\alpha\gamma32', @() vicos.descriptor.AlphaGamma(def_su_ag_13x2_9{:}, 'base_keypoint_size', 15), ...
        'SU-\alpha\gamma60', @() vicos.descriptor.AlphaGamma(def_su_ag_23x2_10{:}, 'base_keypoint_size', 15) ...
    );

    experiments(end+1) = define_experiment(...
        'orb', ...
        'ORB keypoints', ...
        @() vicos.keypoint_detector.ORB('MaxFeatures', 3000, 'PatchSize', 18.5), ... % Default patch size is around 30
        'U-BRIEF64', @() vicos.descriptor.BRIEF(def_u_brief64{:}), ...
        'U-LATCH64', @() vicos.descriptor.LATCH(def_u_latch64{:}), ...
        'U-\alpha\gamma basic', @() vicos.descriptor.AlphaGamma(def_u_ag_basic{:}), ...
        'U-\alpha\gamma32', @() vicos.descriptor.AlphaGamma(def_u_ag_13x2_9{:}), ...
        'U-\alpha\gamma60', @() vicos.descriptor.AlphaGamma(def_u_ag_23x2_10{:}), ...
        'SU-\alpha\gamma32', @() vicos.descriptor.AlphaGamma(def_su_ag_13x2_9{:}, 'base_keypoint_size', 18.5), ...
        'SU-\alpha\gamma60', @() vicos.descriptor.AlphaGamma(def_su_ag_23x2_10{:}, 'base_keypoint_size', 18.5) ...
    );

    experiments(end+1) = define_experiment(...
        'u-brisk', ...
        'BRISK keypoints (unoriented)', ...
        @() vicos.keypoint_detector.BRISK('Threshold', 60), ...
        'U-BRIEF64', @() vicos.descriptor.BRIEF(def_u_brief64{:}), ...
        'U-LATCH64', @() vicos.descriptor.LATCH(def_u_latch64{:}), ...
        'U-\alpha\gamma basic', @() vicos.descriptor.AlphaGamma(def_u_ag_basic{:}), ...
        'U-\alpha\gamma32', @() vicos.descriptor.AlphaGamma(def_u_ag_13x2_9{:}), ...
        'U-\alpha\gamma60', @() vicos.descriptor.AlphaGamma(def_u_ag_23x2_10{:}), ...
        'SU-\alpha\gamma32', @() vicos.descriptor.AlphaGamma(def_su_ag_13x2_9{:}, 'base_keypoint_size', 18.5), ...
        'SU-\alpha\gamma60', @() vicos.descriptor.AlphaGamma(def_su_ag_23x2_10{:}, 'base_keypoint_size', 18.5) ...
    );

    experiments(end+1) = define_experiment(...
        'u-kaze', ...
        'KAZE keypoints (unoriented)', ...
        @() vicos.keypoint_detector.KAZE('Upright', true), ...
        'U-KAZE64', @() vicos.descriptor.KAZE('Upright', true, 'Extended', false), ...
        'U-BRIEF64', @() vicos.descriptor.BRIEF(def_u_brief64{:}), ...
        'U-LATCH64', @() vicos.descriptor.LATCH(def_u_latch64{:}), ...
        'U-\alpha\gamma basic', @() vicos.descriptor.AlphaGamma(def_u_ag_basic{:}), ...
        'U-\alpha\gamma32', @() vicos.descriptor.AlphaGamma(def_u_ag_13x2_9{:}), ...
        'U-\alpha\gamma60', @() vicos.descriptor.AlphaGamma(def_u_ag_23x2_10{:}), ...
        'SU-\alpha\gamma32', @() vicos.descriptor.AlphaGamma(def_su_ag_13x2_9{:}, 'base_keypoint_size', 6.5), ...
        'SU-\alpha\gamma60', @() vicos.descriptor.AlphaGamma(def_su_ag_23x2_10{:}, 'base_keypoint_size', 6.5) ...
    );

    % Run
    affine_run_experiment('pairs', experiments, 'sequences', sequences, 'results_dir', results_dir, 'num_repetitions', num_repetitions, 'num_points', num_points, 'display_results', true);
end


% Experiment definition helper
function def = define_experiment (name, title, keypoint_detector_fcn, varargin)
    if nargin == 0,
        % Empty structure for initialization
        def = repmat(struct('name', [], 'title', [], 'keypoint_detector_fcn', [], 'descriptors', []), 1, 0);
    else
        % Fully-fledged definition
        assert(mod(numel(varargin), 2) == 0, 'Descriptor definitions must be pairs of names and function handles!');
    
        def.name = name;
        def.title = title;
        def.keypoint_detector_fcn = keypoint_detector_fcn;
    
        for i = 1:numel(varargin)/2,
            idx = 2*(i-1) + 1;
            def.descriptors(i).name = varargin{idx};
            def.descriptors(i).create_fcn = varargin{idx+1};
        end
    end
end