function experiments = affine_get_experiment_definition (varargin)
    % experiments = AFFINE_GET_EXPERIMENT_DEFINITION (varargin)
    %
    % Default experiment definition function for Oxford Affine dataset.
    %
    % Input:
    %  - varargin: names of experiments to include. If none are provided,
    %    all defined experiments are returned
    %
    % Output:
    %  - experiments: experiment definition structure to be used with
    %    AFFINE_RUN_EXPERIMENT()
    %
    % (C) 2015-2016, Rok Mandeljc <rok.mandeljc@fri.uni-lj.si>
    
    % Initialize list
    available_experiments = define_experiment();
    
    %% Some common descriptor definitions
    % Sharing the definitions across experiments allows us to quickly
    % modify their settings in one place...
    def_o_brief32 = @() vicos.descriptor.BRIEF('Bytes', 32, 'UseOrientation', true);
    def_u_brief32 = @() vicos.descriptor.BRIEF('Bytes', 32, 'UseOrientation', false);
    
    def_o_brief64 = @() vicos.descriptor.BRIEF('Bytes', 64, 'UseOrientation', true);
    def_u_brief64 = @() vicos.descriptor.BRIEF('Bytes', 64, 'UseOrientation', false);
    
    def_o_latch32 = @() vicos.descriptor.LATCH('Bytes', 32, 'RotationInvariance', true);
    def_u_latch32 = @() vicos.descriptor.LATCH('Bytes', 32, 'RotationInvariance', false);
    
    def_o_latch64 = @() vicos.descriptor.LATCH('Bytes', 64, 'RotationInvariance', true);
    def_u_latch64 = @() vicos.descriptor.LATCH('Bytes', 64, 'RotationInvariance', false);
    
    %def_o_ag_simple = @() vicos.descriptor.AlphaGamma('orientation', true, 'extended', false, 'sampling', 'simple', 'use_scale', false, 'base_sigma', sqrt(2));
    %def_o_ag_55x2 = @() vicos.descriptor.AlphaGamma('orientation', true, 'extended', true, 'sampling', 'gaussian', 'use_scale', false);
    %def_o_ag_23x2 = @() vicos.descriptor.AlphaGamma('orientation', true, 'extended', true, 'sampling', 'gaussian', 'use_scale', false, 'num_rays', 23);
    
    %def_u_ag_simple = @() vicos.descriptor.AlphaGamma('orientation', false, 'extended', false, 'sampling', 'simple', 'use_scale', false, 'base_sigma', sqrt(2));
    %def_u_ag_55x2 = @() vicos.descriptor.AlphaGamma('orientation', false, 'extended', true, 'sampling', 'gaussian', 'use_scale', false);
    %def_u_ag_23x2 = @() vicos.descriptor.AlphaGamma('orientation', false, 'extended', true, 'sampling', 'gaussian', 'use_scale', false, 'num_rays', 23);
    
    def_u_ag_23x2_10 = @() vicos.descriptor.AlphaGamma('orientation', false, 'num_rays', 23, 'num_circles', 10, 'circle_step', 1.042*sqrt(2));
    def_o_ag_23x2_10 = @() vicos.descriptor.AlphaGamma('orientation', true,  'num_rays', 23, 'num_circles', 10, 'circle_step', 1.042*sqrt(2));
    
    % new param: 0.61 za radii(1) v deskriptorju...
    def_u_ag_13x2_9 = @() vicos.descriptor.AlphaGamma('orientation', false, 'num_rays', 13, 'num_circles', 9, 'circle_step', 1.104*sqrt(2));
    def_o_ag_13x2_9 = @() vicos.descriptor.AlphaGamma('orientation', true,  'num_rays', 13, 'num_circles', 9, 'circle_step', 1.104*sqrt(2));
        
    %% Experiment definitions
    % SURF keypoints, oriented descriptors
    available_experiments(end+1) = define_experiment(...
        'surf-o', ...
        'SURF keypoints (oriented)', ...
        @() vicos.keypoint_detector.SURF('HessianThreshold', 400, 'NOctaves', 3, 'NOctaveLayers', 4), ...
        'SURF', @() vicos.descriptor.SURF(), ...
        'O-BRIEF32', def_o_brief32, ...
        'O-BRIEF64', def_o_brief64, ...
        'O-LATCH32', def_o_latch32, ...
        'O-LATCH64', def_o_latch64, ...
        'O-\alpha\gamma 13x2_9', def_o_ag_13x2_9, ...
        'O-\alpha\gamma 23x2_10', def_o_ag_23x2_10 ...
    );

    % SURF keypoints, unoriented descriptors
    available_experiments(end+1) = define_experiment(...
        'surf-u', ...
        'SURF keypoints (unoriented)', ...
        @() vicos.keypoint_detector.SURF('HessianThreshold', 400, 'NOctaves', 3, 'NOctaveLayers', 4, 'UpRight', true), ...
        'U-SURF', @() vicos.descriptor.SURF('UpRight', true), ...
        'U-BRIEF32', def_u_brief32, ...
        'U-BRIEF64', def_u_brief64, ...
        'U-LATCH32', def_u_latch32, ...
        'U-LATCH64', def_u_latch64, ...
        'U-\alpha\gamma 13x2_9', def_u_ag_13x2_9, ...
        'U-\alpha\gamma 23x2_10', def_u_ag_23x2_10 ...
    );
    
    % SIFT keypoints, oriented descriptors
    available_experiments(end+1) = define_experiment(...
        'sift-o', ...
        'SIFT keypoints (oriented)', ...
        @() vicos.keypoint_detector.SIFT(), ...
        'SIFT', @() vicos.descriptor.SIFT(), ...
        'O-BRIEF32', def_o_brief32, ...
        'O-BRIEF64', def_o_brief64, ...
        'O-LATCH32', def_o_latch32, ...
        'O-LATCH64', def_o_latch64, ...
        'O-\alpha\gamma 13x2_9', def_o_ag_13x2_9, ...
        'O-\alpha\gamma 23x2_10', def_o_ag_23x2_10 ...
    );

    % SIFT keypoints, unoriented descriptors
    available_experiments(end+1) = define_experiment(...
        'sift-u', ...
        'SIFT keypoints (unoriented)', ...
        @() vicos.keypoint_detector.SIFT('UpRight', true), ...
        'U-SIFT', @() vicos.descriptor.SIFT(), ...
        'U-BRIEF32', def_u_brief32, ...
        'U-BRIEF64', def_u_brief64, ...
        'U-LATCH32', def_u_latch32, ...
        'U-LATCH64', def_u_latch64, ...
        'U-\alpha\gamma 13x2_9', def_u_ag_13x2_9, ...
        'U-\alpha\gamma 23x2_10', def_u_ag_23x2_10 ...
    );

    % ORB keypoints
    available_experiments(end+1) = define_experiment(...
        'orb', ...
        'ORB keypoints', ...
        @() vicos.keypoint_detector.ORB('MaxFeatures', 2000), ...
        'ORB-32', @() vicos.descriptor.ORB('MaxFeatures', 2000), ...
        'O-BRIEF32', def_o_brief32, ...
        'O-BRIEF64', def_o_brief64, ...
        'O-LATCH32', def_o_latch32, ...
        'O-LATCH64', def_o_latch64, ...
        'O-\alpha\gamma 13x2_9', def_o_ag_13x2_9, ...
        'O-\alpha\gamma 23x2_10', def_o_ag_23x2_10, ...
        'U-BRIEF32', def_u_brief32, ...
        'U-BRIEF64', def_u_brief64, ...
        'U-LATCH32', def_u_latch32, ...
        'U-LATCH64', def_u_latch64, ...
        'U-\alpha\gamma 13x2_9', def_u_ag_13x2_9, ...
        'U-\alpha\gamma 23x2_10', def_u_ag_23x2_10 ...
    );

    % BRISK keypoints
    available_experiments(end+1) = define_experiment(...
        'brisk', ...
        'BRISK keypoints', ...
        @() vicos.keypoint_detector.BRISK('Threshold', 60), ...
        'BRISK', @() vicos.descriptor.BRISK('Threshold', 60), ...
        'O-BRIEF32', def_o_brief32, ...
        'O-BRIEF64', def_o_brief64, ...
        'O-LATCH32', def_o_latch32, ...
        'O-LATCH64', def_o_latch64, ...
        'O-\alpha\gamma 13x2_9', def_o_ag_13x2_9, ...
        'O-\alpha\gamma 23x2_10', def_o_ag_23x2_10, ...
        'U-BRIEF32', def_u_brief32, ...
        'U-BRIEF64', def_u_brief64, ...
        'U-LATCH32', def_u_latch32, ...
        'U-LATCH64', def_u_latch64, ...
        'U-\alpha\gamma 13x2_9', def_u_ag_13x2_9, ...
        'U-\alpha\gamma 23x2_10', def_u_ag_23x2_10 ...
    );

    % Harris keypoints
    available_experiments(end+1) = define_experiment(...
        'harris', ...
        'Harris corners', ...
        @() vicos.keypoint_detector.Harris('MaxFeatures', 4000), ...
        'O-\alpha\gamma 13x2_9', def_o_ag_13x2_9, ...
        'O-\alpha\gamma 23x2_10', def_o_ag_23x2_10, ...
        'U-BRIEF32', def_u_brief32, ...
        'U-BRIEF64', def_u_brief64, ...
        'U-LATCH32', def_u_latch32, ...
        'U-LATCH64', def_u_latch64, ...
        'U-\alpha\gamma 13x2_9', def_u_ag_13x2_9, ...
        'U-\alpha\gamma 23x2_10', def_u_ag_23x2_10 ...
    );

    % R7BW keypoints
    available_experiments(end+1) = define_experiment(...
        'r7bw', ...
        'R7BW', ...
        @() vicos.keypoint_detector.FeatureR7BW(), ...
        'O-\alpha\gamma 13x2_9', def_o_ag_13x2_9, ...
        'O-\alpha\gamma 23x2_10', def_o_ag_23x2_10, ...
        'U-BRIEF32', def_u_brief32, ...
        'U-BRIEF64', def_u_brief64, ...
        'U-LATCH32', def_u_latch32, ...
        'U-LATCH64', def_u_latch64, ...
        'U-\alpha\gamma 13x2_9', def_u_ag_13x2_9, ...
        'U-\alpha\gamma 23x2_10', def_u_ag_23x2_10 ...
    );

    %% Return
    if nargin == 0,
        % Return all
        experiments = available_experiments;
    else
        % Make sure no invalid experiments were specified
        invalid = find(~ismember(varargin, { available_experiments.name }));
        assert(isempty(invalid), 'Invalid experiment name(s): %s', strjoin(varargin(invalid), ', '));
        
        % Return requested experiments
        selected_idx = ismember({ available_experiments.name }, varargin);
        experiments = available_experiments(selected_idx);
    end
end

function def = define_experiment (name, title, keypoint_detector_fcn, varargin)
    if nargin == 0,
        % Empty structure for initialization
        def = repmat(struct('name', [], 'title', [], 'keypoint_detector_fcn', [], 'descriptors', []), 1, 0);
    else
        % Fully-fledged definition
        assert(mod(numel(varargin), 2) == 0, 'Descriptor definitions must be pairs of names and function handles!');
    
        def.name = name;
        def.title = title;
        def.keypoint_detector_fcn = keypoint_detector_fcn;
    
        for i = 1:numel(varargin)/2,
            idx = 2*(i-1) + 1;
            def.descriptors(i).name = varargin{idx};
            def.descriptors(i).create_fcn = varargin{idx+1};
        end
    end
end